trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  EC2_USER: 'ec2-user'
  EC2_HOST: '$(ec2Ip)'                # Set this in your pipeline variables
  SONARQUBE_PROJECT_KEY: 'simple-html-site'

stages:
- stage: AnalyzeAndDeploy
  jobs:
  - job: RunPipeline
    steps:

    # Step 1: Prepare SonarQube analysis - disable branch analysis for Community Edition
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'SonarQubeService'   # Your SonarQube service connection
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
        cliSources: '.'
        extraProperties: |
          sonar.analysis.mode=preview      # Use preview mode to avoid branch analysis errors
          sonar.verbose=true
          sonar.log.level=DEBUG

    # Step 2: Run the analysis
    - task: SonarQubeAnalyze@6

    # Step 3: Publish the results
    - task: SonarQubePublish@6
      inputs:
        pollingTimeoutSec: '300'

    # Step 4: Install SSH key for EC2 access
    - task: InstallSSHKey@0
      inputs:
        sshKeySecureFile: 'app.pem'       # Your uploaded private key
        knownHostsEntry: '$(EC2_HOST)'

    # Step 5: Deploy HTML files to EC2
    - script: |
        echo "Deploying HTML files to EC2..."
        scp -i $(Agent.TempDirectory)/app.pem -o StrictHostKeyChecking=no -r *.html $(EC2_USER)@$(EC2_HOST):/var/www/html/site
      displayName: 'Deploy HTML to EC2'
