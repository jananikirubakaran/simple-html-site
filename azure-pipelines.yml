trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  EC2_USER: 'ec2-user'
  EC2_HOST: '$(ec2Ip)'                        # Set this in Azure DevOps pipeline variables
  SONARQUBE_PROJECT_KEY: 'simple-html-site'
  SONARQUBE_HOST_URL: 'http://3.82.109.36:9000'  # Replace with your SonarQube IP
  SONARQUBE_TOKEN: '$(sonarToken)'            # Store securely in Azure DevOps library

stages:
- stage: AnalyzeAndDeploy
  jobs:
  - job: fullJob
    steps:

    - task: InstallSSHKey@0
      inputs:
        sshKeySecureFile: 'app.pem'
        knownHostsEntry: '$(EC2_HOST)'

    - script: |
        echo "== Installing Java 17 =="
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jdk wget unzip

        echo "== Setting Java 17 =="
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        java -version

        echo "== Downloading SonarScanner =="
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip sonar-scanner-cli-4.8.0.2856-linux.zip
        export PATH=$(pwd)/sonar-scanner-4.8.0.2856-linux/bin:$PATH

        echo "== Running SonarScanner =="
        sonar-scanner \
          -Dsonar.projectKey=$(SONARQUBE_PROJECT_KEY) \
          -Dsonar.sources=. \
          -Dsonar.host.url=$(SONARQUBE_HOST_URL) \
          -Dsonar.login=$(SONARQUBE_TOKEN) \
          -Dsonar.branch.name=""

        echo "== Deploying to EC2 =="
        scp -i $(Agent.TempDirectory)/app.pem -o StrictHostKeyChecking=no -r *.html $(EC2_USER)@$(EC2_HOST):/var/www/html/site
      displayName: 'Analyze and Deploy'
