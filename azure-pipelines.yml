trigger:
- main  # Pipeline triggers on pushes to main branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  EC2_USER: 'ec2-user'
  EC2_HOST: '$(ec2Ip)'           # EC2 IP stored securely as pipeline variable
  SONARQUBE_PROJECT_KEY: 'simple-html-site'

stages:
- stage: AnalyzeAndDeploy
  displayName: 'Analyze Code and Deploy Website'
  jobs:
  - job: AnalyzeAndCopy
    displayName: 'Run SonarQube Scan and Deploy to EC2'
    steps:

    # Prepare SonarQube analysis without branch analysis (Community Edition)
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'SonarQubeService'  # Your service connection name
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
        cliSources: '.'  # Analyze all source files in repo
        # Do NOT add sonar.branch.name here for Community Edition

    # Run the code analysis
    - task: SonarQubeAnalyze@6

    # Publish the SonarQube analysis results to the dashboard
    - task: SonarQubePublish@6
      inputs:
        pollingTimeoutSec: '300'

    # Install SSH key for secure connection to EC2
    - task: InstallSSHKey@0
      inputs:
        sshKeySecureFile: 'app.pem'        # Secure file uploaded in Azure DevOps
        knownHostsEntry: '$(EC2_HOST)'     # Avoid SSH prompt

    # Optional: Debug PEM file presence
    - script: |
        echo "Listing PEM file in temp directory"
        ls -l $(Agent.TempDirectory)
      displayName: 'Debug: List PEM file'

    # Deploy HTML files to EC2 using SCP
    - script: |
        echo "Deploying HTML files to EC2..."
        scp -i $(Agent.TempDirectory)/app.pem -o StrictHostKeyChecking=no -r *.html $(EC2_USER)@$(EC2_HOST):/var/www/html/site
      displayName: 'Deploy HTML files to EC2 via SCP'
