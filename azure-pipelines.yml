trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  EC2_USER: 'ec2-user'
  EC2_HOST: '$(ec2Ip)'          # Set this securely in pipeline variables
  SONARQUBE_PROJECT_KEY: 'simple-html-site'

stages:
- stage: AnalyzeAndDeploy
  jobs:
  - job: ScanAndDeploy
    steps:

    # Force build branch to main to avoid any implicit branch analysis
    - script: |
        echo "##vso[task.setvariable variable=BUILD_SOURCEBRANCH]refs/heads/main"
      displayName: 'Force build branch to main'

    # Prepare SonarQube analysis - NO branch name set
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'SonarQubeService'   # Replace with your service connection name
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
        cliSources: '.'
        extraProperties: |
          sonar.verbose=true
          sonar.log.level=DEBUG

    # Run SonarQube analysis
    - task: SonarQubeAnalyze@6

    # Publish SonarQube results
    - task: SonarQubePublish@6
      inputs:
        pollingTimeoutSec: '300'

    # Install SSH Key for EC2
    - task: InstallSSHKey@0
      inputs:
        sshKeySecureFile: 'app.pem'        # Your uploaded secure file
        knownHostsEntry: '$(EC2_HOST)'

    # Debug SSH key presence (optional)
    - script: |
        ls -l $(Agent.TempDirectory)
      displayName: 'Check SSH key presence'

    # Deploy HTML files to EC2 via SCP
    - script: |
        echo "Deploying HTML files to EC2..."
        scp -i $(Agent.TempDirectory)/app.pem -o StrictHostKeyChecking=no -r *.html $(EC2_USER)@$(EC2_HOST):/var/www/html/site
      displayName: 'Deploy HTML to EC2'
