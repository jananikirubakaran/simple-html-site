trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  EC2_USER: 'ec2-user'
  EC2_HOST: '$(ec2Ip)'                     # Set this as a pipeline variable (secret if needed)
  SONARQUBE_PROJECT_KEY: 'simple-html-site'

stages:
- stage: AnalyzeAndDeploy
  jobs:
  - job: RunPipeline
    steps:

    # Step 1: Force main branch to avoid branch scan errors (Community Edition)
    - script: |
        echo "##vso[task.setvariable variable=BUILD_SOURCEBRANCH]refs/heads/main"
      displayName: 'Force main branch'

    # Step 2: Prepare SonarQube analysis
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'SonarQubeService'         # <-- Service connection created in Azure DevOps
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
        cliSources: '.'
        extraProperties: |
          sonar.verbose=true
          sonar.log.level=DEBUG

    # Step 3: Run analysis
    - task: SonarQubeAnalyze@6

    # Step 4: Publish analysis report
    - task: SonarQubePublish@6
      inputs:
        pollingTimeoutSec: '300'

    # Step 5: Install the SSH key for EC2
    - task: InstallSSHKey@0
      inputs:
        sshKeySecureFile: 'app.pem'            # <-- Upload app.pem in Library > Secure Files
        knownHostsEntry: '$(EC2_HOST)'

    # Step 6: Debug listing to confirm SSH key loaded
    - script: |
        echo "Listing agent temp directory:"
        ls -la $(Agent.TempDirectory)
      displayName: 'Debug SSH key location'

    # Step 7: Copy HTML files to EC2 instance
    - script: |
        echo "Deploying HTML to EC2..."
        scp -i $(Agent.TempDirectory)/app.pem -o StrictHostKeyChecking=no -r *.html $(EC2_USER)@$(EC2_HOST):/var/www/html/site
      displayName: 'Deploy HTML to EC2'
