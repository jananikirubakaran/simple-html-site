trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  EC2_USER: 'ec2-user'
  EC2_HOST: '$(ec2Ip)'                         # <-- Defined as a pipeline variable
  SONARQUBE_PROJECT_KEY: 'simple-html-site'

stages:
- stage: AnalyzeAndDeploy
  jobs:
  - job: RunPipeline
    steps:

    # Step 1: Force main branch to avoid developer edition issues
    - script: |
        echo "##vso[task.setvariable variable=BUILD_SOURCEBRANCH]refs/heads/main"
      displayName: 'Force main branch'

    # Step 2: Prepare SonarQube scan (CLI mode)
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'SonarQubeService'          # <-- SonarQube service connection in Azure DevOps
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
        cliSources: '.'
        extraProperties: |
          sonar.verbose=true
          sonar.log.level=DEBUG
          sonar.branch.name=main               # <-- Prevents branch error in Community Edition

    # Step 3: Run scan
    - task: SonarQubeAnalyze@6

    # Step 4: Publish scan results
    - task: SonarQubePublish@6
      inputs:
        pollingTimeoutSec: '300'

    # Step 5: Install SSH Key (from Secure Files)
    - task: InstallSSHKey@0
      inputs:
        sshKeySecureFile: 'app.pem'            # <-- Upload this in Azure DevOps > Library > Secure Files
        knownHostsEntry: '$(EC2_HOST)'

    # Step 6: (Optional) Debug â€“ List files
    - script: |
        echo "Listing files in agent temp directory:"
        ls -la $(Agent.TempDirectory)
      displayName: 'Debug SSH Key'

    # Step 7: Deploy HTML files to EC2
    - script: |
        echo "Deploying HTML to EC2 at /var/www/html/site..."
        scp -i $(Agent.TempDirectory)/app.pem -o StrictHostKeyChecking=no -r *.html $(EC2_USER)@$(EC2_HOST):/var/www/html/site
      displayName: 'Deploy HTML to EC2'
